#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# Copyright Â© 2007-2018 ANSSI. All Rights Reserved.
# CLIP pkg mngt tool
# Author: EADS
set -e

# Global variables
g_pkg_name=""
g_repository_svn=""
g_public_key=$HOME/`whoami`".ppr"
g_private_key=$HOME/`whoami`".pvr"
g_ctrl=""
g_temp_dir="/tmp/"$$
g_sig_name=""
g_sig_re=""
g_force=""

################################
# Function : usage
# Display the usage of the tool
################################
usage () {
	echo "Usage :"$0" -hvirkc"
	echo ""
	echo "Signs a given package and import it into the given Subversion repository"
	echo ""
	echo "Mandatory parameters :"
	echo "	-i pkg or -ipkg		Give the package fullname (pkg)"
	echo "	-r repo or -rrepo	Give the repository full URL (repo)"
	echo ""
	echo "Options :"
	echo "	-c cert or -ccert	Give the public key file fullname (cert) : "$g_public_key" by default" 
	echo "	-k key or -kkey		Give the private key file fullname (key) : "$g_private_key" by default" 
	echo "  -f                      Force overwrite in svn"
	echo "	-h			Display this help"
	echo "	-v			Display the version of the tool"
	echo "  -C                      Create a controller signature, rather than a developper one"
}

################################
# Function : version
# Display the version of the tool
################################
version () {
	echo "Version 1.2.1"
}

################################
# Function : error_treatment
# Error treatment 
################################
error_treatment () {
	echo "error during the execution of ["$1"]"

	# Removal of the temporary directory
	rm -rf $g_temp_dir

	exit 1
}

################################
# Function : verify_dir
# Does the directory exist ?
################################
verify_dir () {
	if [ ! -d $1 ]
	then
		echo "Directory "$1" does not exist"

		# Removal of the temporary directory
		rm -rf $g_temp_dir

		exit 1
	fi
}

################################
# Function : verify_file
# Does the file exist ?
################################
verify_file () {
	if [ ! -f $1 ]
	then
		echo "File "$1" does not exist"

		# Removal of the temporary directory
		rm -rf $g_temp_dir

		exit 1
	fi
}

################################
# Function : error_repo
# The repo does no exist ?
################################
erreur_repo () {
	echo "Impossible to connect to the repository "$1
	
	# Removal of the temporary directory
	rm -rf $g_temp_dir
	 
	exit 1
}

################################
# Function : verify_repo
# Does the repo exist ?
################################
verify_repo ()
{
	echo "Verifying the repository $1"	
	svn list --non-interactive $1 >/dev/null 2>&1  || erreur_repo $1 
	echo "Repository OK"
}

################################
# Main
################################

# Parsing the options
while getopts hvi:r:k:c:vCf f 
do
	case $f in
	i)
		g_pkg_name=$OPTARG;;
	r)
		g_repository_svn=$OPTARG;;
	c)
		g_public_key=$OPTARG;;
	k)
		g_private_key=$OPTARG;;
	f)
		g_force="yes";;
	h)
		usage
		exit 0
		;;
	C)
		g_ctrl="yes" ;;
	v)
		version
		exit 0
		;;
	\?)
		usage
		exit 1
		;;
	esac
done

if [[ -n "${g_ctrl}" ]]; then
	g_sig_re='[_|-|[:alnum:]]+-CTRL[_|-|[:alnum:]]+'
	g_sig_name='ctrl_sign'
else
	g_sig_re='[_|-|[:alnum:]]+-DEV[_|-|[:alnum:]]+'
	g_sig_name='dev_sign'
fi


#shift 'expr $OPTIND - 1'

# Verify the parameters
if [ "$g_pkg_name" = "" ]
then
	echo "Package name undefined"
	usage
	exit 1
fi

if [ "$g_repository_svn" = "" ]
then
	echo "Subversion repository undefined"
	usage
	exit 1
fi

if [ "$g_public_key" = "" ]
then
	echo "Public key undefined"
	usage
	exit 1
fi

if [ "$g_private_key" = "" ]
then
	echo "Private key undefined"
	usage
	exit 1
fi

verify_file $g_pkg_name
verify_file $g_public_key
verify_file $g_private_key
verify_repo $g_repository_svn 

# Verify the name of the package
if [ "${g_pkg_name%%.deb}" = "$g_pkg_name" ]
then
	echo "Invalid package name : "$g_pkg_name
	exit 1
elif [ "${g_pkg_name%%.src.deb}" = "$g_pkg_name" ]
then
	g_pkg_type="binary"
else
	g_pkg_type="source"
fi


# Creation of the temporary directory
if [ ! -d $g_temp_dir ]
then
	mkdir -p $g_temp_dir 
fi

# Signature creation
echo "Signing the "$g_pkg_type" package "$g_pkg_name" using "$g_public_key" public key and "$g_private_key" private key"

g_signed_pkg_name=$g_temp_dir/`basename $g_pkg_name`
cp "${g_pkg_name}" "${g_signed_pkg_name}" || error_treatment "failed to copy ${g_pkg_name} to ${g_signed_pkg_name}"
verify_file $g_signed_pkg_name

ccsd-sign -r "${g_sig_re}" -k "${g_private_key}" -c "${g_public_key}" "${g_signed_pkg_name}" "${g_sig_name}" \
	|| error_treatment "ccsd-sign ${g_signed_pkg_name} ${g_sig_name}"


g_signed_pkg_short_name=`basename $g_signed_pkg_name`

# Import in Subversion
echo "Importing "$g_signed_pkg_short_name" into Subversion repository "$g_repository_svn

cd $g_temp_dir
set +e
svn import -m "Import of ${g_signed_pkg_short_name}" ${g_signed_pkg_short_name} ${g_repository_svn}/${g_signed_pkg_short_name} >/dev/null 2>&1
result=$?
set -e
already_in_svn=0
if [ ${result} != 0 ]
then
	# Test whether the configuration is allready under control version
	list=`svn ls ${g_repository_svn}/${g_signed_pkg_short_name}`
	if [ "x${list}" = "x${g_signed_pkg_short_name}" ]
	then
		already_in_svn=1
	else
		error_treatment "svn import ${g_signed_pkg_short_name} ${g_repository_svn}/${g_signed_pkg_short_name}"
	fi
fi

if [ ${already_in_svn} != 0 ]
then
	if [[ -n "${g_force}" ]]; then
		overwrite="yes"
	else
		echo "${g_signed_pkg_short_name} is already under version control. Do you want to overwrite it? ('yes' or 'no')"
		owerwrite="no"
		while read line
		do
			if [ "${line}" = "yes" ]
			then
				overwrite="yes"
				break
			else
				if [ "${line}" = "no" ]
				then
					break
				else
					echo "${g_signed_pkg_short_name} is already under version control. Do you want to overwrite it? ('yes' or 'no')"
				fi
			fi
		done
	fi

	if [ "${overwrite}" = "yes" ]
	then
		svn delete -m "Suppression of previous version of ${g_signed_pkg_short_name}" ${g_repository_svn}/${g_signed_pkg_short_name}
		svn import -m "Import of ${g_signed_pkg_short_name}" ${g_signed_pkg_short_name} ${g_repository_svn}/${g_signed_pkg_short_name}
	else
		echo "Program interrupted by user"
		#remove temp dir
		rm -rf ${g_temp_dir}
		exit 1
	fi
fi



# Removal of the temporary directory
rm -rf $g_temp_dir
exit 0
