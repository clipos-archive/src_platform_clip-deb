#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright Â© 2007-2018 ANSSI. All Rights Reserved.

#
# quickdeb : create a .deb package from a merged gentoo ebuild.
# Copyright (C) 2006 Vincent Strubel <clipos@ssi.gouv.fr>
# Largely based on quickpkg, which is Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
#

if [ "${UID}" != "0" ] ; then
	echo "You must run this as root"
	exit 1
fi

export PORTAGE_DB=$(portageq vdb_path)
export ROOT=$(portageq envvar ROOT)
export ROOT=${ROOT%/}/

if [ -z "$1" ] || [ $1 == "-h" ] || [ $1 == "--help" ] ; then
	echo "QUICKDEB ver 1.0"
	echo "USAGE: quickdeb <list of pkgs>"
	echo "    a pkg can be of the form:"
	echo "        - ${PORTAGE_DB}/<CATEGORY>/<PKG-VERSION>/"
	echo "        - single depend-type atom ..."
	echo "              if portage can emerge it, quickpkg can make a package"
	echo "              for exact definitions of depend atoms, see ebuild(5)"
	echo
	echo "EXAMPLE:"
	echo "    quickdeb ${PORTAGE_DB}/net-www/apache-1.3.27-r1"
	echo "        package up apache, just version 1.3.27-r1"
	echo "    quickdeb apache"
	echo "        package up apache, all versions of apache installed"
	echo "    quickdeb =apache-1.3.27-r1"
	echo "        package up apache, just version 1.3.27-r1"
	exit 1
fi

export DEBDIR=$(portageq envvar DEBDIR)
export PORTAGE_TMPDIR=$(portageq envvar PORTAGE_TMPDIR)

source /sbin/functions.sh

# here we make a package given a little info
# $1 = package-name w/version
# $2 = category
do_pkg() {
	mkdir -p "${PORTAGE_TMPDIR}/debs" || exit 1
	chmod 0750 "${PORTAGE_TMPDIR}/debs"
	MYDIR="${PORTAGE_TMPDIR}/debs/$1"
	SRCDIR="${PORTAGE_DB}/$2/$1"
	LOG="${PORTAGE_TMPDIR}/debs/$1-quickdeblog"
	BINDIR="${MYDIR}/image"
	INFODIR="${MYDIR}/build-info"

	ebegin "Building package for $1"
	(
		# clean up temp directory
		rm -rf "${MYDIR}"

		# get pkg info files
		mkdir -p "${INFODIR}"
		cp "${SRCDIR}"/* "${INFODIR}"

		# create filelist and a basic tbz2
		gawk '{
			if ($1 != "dir") {
				if ($1 == "obj")
					NF=NF-2
				else if ($1 == "sym")
					NF=NF-3
				print
			}
		}' "${SRCDIR}"/CONTENTS | cut -f2- -d" " - | sed -e 's:^/:./:' > "${MYDIR}"/filelist
		mkdir -p "${BINDIR}"
		tar vcf - -C "${ROOT}" --files-from="${MYDIR}"/filelist \
			--no-recursion |
			tar xpf - -C "${BINDIR}"

		# create control file
		mkdir -p "${BINDIR}/DEBIAN"
		pushd "${INFODIR}" > /dev/null
		gencontrol.pl "${BINDIR}/DEBIAN/control"
		popd > /dev/null
		
		# get .deb name
		PKGNAME=`grep "^Package:" "${BINDIR}/DEBIAN/control" | cut -d" " -f2`
		PKGVERS=`grep "^Version:" "${BINDIR}/DEBIAN/control" | cut -d" " -f2`
		PKGARCH=`grep "^Architecture:" "${BINDIR}/DEBIAN/control" | cut -d" " -f2`
		DEBNAME="${PKGNAME}_${PKGVERS}_${PKGARCH}.deb"

		# create .deb
		pushd "${MYDIR}" > /dev/null
		einfo "Building .deb with following controls:"
		cat image/DEBIAN/control
		dpkg-deb -b image ${DEBNAME}
		popd "${MYDIR}" > /dev/null

		# move the final binary package to DEBDIR
		[ -d "${DEBDIR}" ] ||  mkdir -p "${DEBDIR}"
		mv "${MYDIR}"/${DEBNAME} "${DEBDIR}"

		# cleanup again
		rm -rf "${MYDIR}"
	) >& "${LOG}"
	eend $?
}

# here we parse the parameters given to use on the cmdline
for x in "$@" ; do

	# they gave us full path
	if [ -e "${x}"/CONTENTS ] ; then
		x=$(readlink -f $x)
		pkg=$(echo ${x} | cut -d/ -f6)
		cat=$(echo ${x} | cut -d/ -f5)
		do_pkg "${pkg}" "${cat}"

	# lets figure out what they want
	else
		DIRLIST=$(portageq match "${ROOT}" "${x}")
		if [ -z "${DIRLIST}" ] ; then
			eerror "Could not find anything to match '${x}'; skipping"
			continue
		fi

		for d in ${DIRLIST} ; do
			pkg=$(echo ${d} | cut -d/ -f2)
			cat=$(echo ${d} | cut -d/ -f1)
			if [ -f "${PORTAGE_DB}/${cat}/${pkg}/CONTENTS" ] ; then
				do_pkg ${pkg} ${cat}
			elif [ -d "${PORTAGE_DB}/${cat}/${pkg}" ] ; then
				ewarn "Package '${cat}/${pkg}' was injected; skipping"
			else
				eerror "Unhandled case (${cat}/${pkg}) !"
				eerror "Please file a bug at http://bugs.gentoo.org/"
				exit 10
			fi
		done
	fi

done

exit 0
